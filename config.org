#+TITLE: Emacs Configuration
#+AUTHOR: Terje Larsen
* Base
  For quicker operations it is useful to ensure that the Emacs server
  is running.
  #+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
  #+END_SRC

  Disable bell (both visual and audible)
  #+BEGIN_SRC emacs-lisp
  (setq ring-bell-function #'ignore
        visible-bell nil)
  #+END_SRC

  Use =y= / =n= instead of =yes= / =no=
  #+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs #'y-or-n-p)
  (fset #'yes-or-no-p #'y-or-n-p)
  #+END_SRC

  Localization
  #+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1)
  #+END_SRC

  Hide mode-line modes
  #+BEGIN_SRC emacs-lisp
  (use-package diminish :ensure t :commands diminish)
  #+END_SRC

  More convenient key definitions
  #+BEGIN_SRC emacs-lisp
  (use-package general :ensure t :demand t)
  #+END_SRC

  Enable minor modes by buffer name and contents
  #+BEGIN_SRC emacs-lisp
  (use-package auto-minor-mode :ensure t :demand t)
  #+END_SRC

  Support functions for displaying icons. I am trying to use icons
  where possible.
  #+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t :demand t
    :init
    ;; Fix font-lock issue causing wrong icons to be displayed.
    (defun +font-lock-default-unfontify-region (beg end)
      "Unfontify from BEG to END, except text with property `font-lock-ignore'."
      (let ((here  (min beg end))
            (end1  (max beg end))
            chg)
        (while (< here end1)
          (setq chg  (next-single-property-change here 'font-lock-ignore nil end1))
          (unless (get-text-property here 'font-lock-ignore)
            (remove-list-of-text-properties
             here chg (append font-lock-extra-managed-props
                              (if syntax-propertize-function
                                  '(syntax-table face font-lock-multiline)
                                '(face font-lock-multiline)))))
          (setq here chg))))
    (advice-add 'font-lock-default-unfontify-region :override #'+font-lock-default-unfontify-region))
  #+END_SRC

  Library to display inline popups, used by =source-peek=.
  #+BEGIN_SRC emacs-lisp
  (use-package quick-peek :ensure t)
  #+END_SRC

** Functions
   #+BEGIN_SRC emacs-lisp
   (defmacro quiet! (&rest forms)
     "Run FORMS without making any noise."
     `(if +debug-mode
          (progn ,@forms)
        (fset '+old-write-region-fn (symbol-function 'write-region))
        (cl-letf ((standard-output (lambda (&rest _)))
                  ((symbol-function 'load-file) (lambda (file) (load file nil t)))
                  ((symbol-function 'message) (lambda (&rest _)))
                  ((symbol-function 'write-region)
                   (lambda (start end filename &optional append visit lockname mustbenew)
                     (unless visit (setq visit 'no-message))
                     (when (fboundp '+old-write-region-fn)
                       (+old-write-region-fn
                        start end filename append visit lockname mustbenew))))
                  (inhibit-message t)
                  (save-silently t))
          ,@forms)))

   (defun quiet-function-advice (orig-fn &rest args)
     "Advice used to make a function quiet.
   Call ORIG-FN with ARGS and suppress the output.

   Example:
     (advice-add #'orig-fun :around #'quiet-function-advice)"
     (quiet! (apply orig-fn args)))
   #+END_SRC

** Shell
   Make less work inside shells
   #+BEGIN_SRC emacs-lisp
   (setenv "LESS" "--dumb --prompt=s")
   #+END_SRC

   Set shell to bash as fish is not compatible with all packages using the shell.
   #+BEGIN_SRC emacs-lisp
   (setq shell-file-name "bash")
   #+END_SRC

   Make scripts executable on save
   #+BEGIN_SRC emacs-lisp
   (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
   #+END_SRC

** Backup
   Enable auto save
   #+BEGIN_SRC emacs-lisp
   (auto-save-visited-mode 1)
   (setq save-abbrevs 'silently)
   #+END_SRC

   Prevent generation of useless lock and backup files.
   #+BEGIN_SRC emacs-lisp
   (setq create-lockfiles nil
         make-backup-files nil)
   #+END_SRC

* Appearance
** Typography
   Configure fonts:
   #+BEGIN_SRC emacs-lisp
   (defvar +default-font-height 100
     "Default font height.")

   (defvar +line-spacing 0.2
     "Spacing between lines.")

   (defvar +fixed-pitch-font "Iosevka Slab"
     "Font used for fixed-pitch faces.")

   (defvar +variable-pitch-font "Noto Sans"
     "Font used for variable-pitch faces.")

   (defvar +unicode-font "Noto Mono"
     "Fallback font used for unicode glyphs.")
    #+END_SRC

** Theme
   Install an excellent, light, uncoloured theme:
   #+BEGIN_SRC emacs-lisp
   (use-package tao-theme :el-get t :demand t
     :custom
     (tao-theme-use-height t)
     (tao-theme-use-sepia t))
   #+END_SRC

   Load the theme and my local overrides:
   #+BEGIN_SRC emacs-lisp
   (load-theme 'tao-yang t)
   (require 'local-theme (expand-file-name "local-theme" user-emacs-directory))
   (load-theme 'local t)
   #+END_SRC

** Mode line
   I am trying to keep the original mode line as much as possible to
   ensure compatibility with various packages and features, but I have
   rearranged the position of things and also introduced a right side
   mode line. I have defined a helper function to fill up the space
   needed to make the mode line appear on the right side.
   #+BEGIN_SRC emacs-lisp
   (defvar mode-line-space
     '(:propertize
       " " display
       ((space :width 1)))
     "Space between mode line components.")

   (defvar mode-line-right-format nil
     "The mode line to display on the right side.")

   (defun mode-line-right ()
     "Render the `mode-line-right-format'."
     (let ((formatted-line (format-mode-line mode-line-right-format)))
       (list
        (propertize
         " "
         'display `((space :align-to
                           (- (+ right right-fringe right-margin)
                              ,(+ 1
                                  (* (string-width formatted-line)
                                     0.8))))))
        formatted-line)))

   (setq-default mode-line-format
                 (append
                  mode-line-format
                  '((:eval (mode-line-right)))))
   #+END_SRC

   Move default components to the right side of the mode line.
   #+BEGIN_SRC emacs-lisp
   (delete 'mode-line-position mode-line-format)
   (delete 'mode-line-mule-info mode-line-format)
   (delete 'mode-line-modes mode-line-format)

   (setq mode-line-right-format
         `(,mode-line-position
           (:eval mode-line-mule-info)
           ,mode-line-space
           ,mode-line-modes))
   #+END_SRC

   Setup position mode line:
   - Show both column and line number
   - Skip percentage
   #+BEGIN_SRC emacs-lisp
   (setq mode-line-percent-position nil)
   (column-number-mode 1)
   (line-number-mode 1)
   #+END_SRC

   Display information about the current indentation settings.
   #+BEGIN_SRC emacs-lisp
   (use-package indent-info :ensure t :defer 1
     :init
     (setq indent-info-insert-target 'mode-line-mule-info
           indent-info-prefix nil
           indent-info-suffix " ")
     :config
     (global-indent-info-mode 1))
   #+END_SRC

   Support hiding the mode line, this can be useful for different
   modes displaying documents or presentation.
   #+BEGIN_SRC emacs-lisp
   (use-package hide-mode-line :ensure t
     :commands hide-mode-line-mode)
   #+END_SRC

   Hide minor modes to save space.
   #+BEGIN_SRC emacs-lisp
   (diminish 'auto-fill-function)
   (diminish 'eldoc-mode)
   (with-eval-after-load 'face-remap (diminish 'buffer-face-mode))
   #+END_SRC

*** Icons
    Replace obscure mode line indicators with simple icons.
    #+BEGIN_SRC emacs-lisp
    (defun mode-line-modified-icons ()
      "Icon representation of `mode-line-modified'."
      (cond (buffer-read-only
             (concat (all-the-icons-octicon "lock" :v-adjust -0.05) " "))
            ((buffer-modified-p)
             (concat (all-the-icons-faicon "floppy-o" :v-adjust -0.05) " "))
            ((and buffer-file-name
                  (not (file-exists-p buffer-file-name)))
             (concat (all-the-icons-octicon "circle-slash" :v-adjust -0.05) " "))))

    (defun mode-line-remote-icons ()
      "Icon representation of `mode-line-remote'."
      (when (and buffer-file-name
                 (file-remote-p buffer-file-name))
        (concat (all-the-icons-octicon "radio-tower" :v-adjust -0.02) " ")))

    (with-eval-after-load 'all-the-icons
      (setq-default
       mode-line-modified '((:eval (mode-line-modified-icons)))
       mode-line-remote   '((:eval (mode-line-remote-icons)))))
    #+END_SRC

    Shorten long Git branch names as well as replace Git prefix with a
    nice icon.
    #+BEGIN_SRC emacs-lisp
    (defun +shorten-vc-mode-line (string)
      "Shorten `version-control' STRING in mode-line and add icon."
      (cond
       ((string-prefix-p "Git" string)
        (concat (all-the-icons-octicon "git-branch" :v-adjust -0.05)
                " "
                (if (> (length string) 30)
                    (concat (substring-no-properties string 4 30) "…")
                  (substring-no-properties string 4))))
       (t
        string)))
    (advice-add 'vc-git-mode-line-string :filter-return '+shorten-vc-mode-line)
    #+END_SRC

** Layout
   Add some margins to make text feel less crowded. Put fringes on the
   outside for the same reason.
   #+BEGIN_SRC emacs-lisp
   (setq-default fringes-outside-margins t
                 left-margin-width 1
                 right-margin-width 1)
   #+END_SRC

   Add window dividers, mainly to add a border below the mode line.
   #+BEGIN_SRC emacs-lisp
   (when (boundp 'window-divider-mode)
     (setq window-divider-default-places t
           window-divider-default-bottom-width 1
           window-divider-default-right-width 1)
     (window-divider-mode 1))
   #+END_SRC

* Accessibility
  Text scaling works across all buffers. I rarely find that I only
  want to change the text scale only for one buffer.
  #+BEGIN_SRC emacs-lisp
  (defadvice text-scale-increase (around all-buffers (arg) activate)
    "Text scale across all buffers."
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer ad-do-it)))
  #+END_SRC

  Change the default text scale across buffers.
  #+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :commands
    (default-text-scale-increase default-text-scale-decrease))
  #+END_SRC

  Display page breaks as a horizontal line
  #+BEGIN_SRC emacs-lisp
  (use-package page-break-lines :ensure t :defer 1
    :diminish page-break-lines-mode
    :commands
    (page-break-lines-mode
     global-page-break-lines-mode)
    :config
    (global-page-break-lines-mode 1))
  #+END_SRC

  Line highlighting
  #+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :hook
    ((prog-mode conf-mode) . hl-line-mode)
    :custom
    ;; Only highlight in selected window
    (hl-line-sticky-flag nil)
    (global-hl-line-sticky-flag nil))
  #+END_SRC

* Completion
  Enable completion with tab
  #+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
  #+END_SRC

** Hippie
   Smart expansion completions, excellent for completing lines.
   Replace abbrev completion (=M-/=) with hippie expand.

   Complete in the following order:
   - Try to expand word "dynamically", searching the current buffer.
   - Try to expand word "dynamically", searching all other buffers.
   - Try to expand word "dynamically", searching the kill ring.
   - Try to complete text as a file name, as many characters as unique.
   - Try to complete text as a file name.
   - Try to expand word before point according to all abbrev tables.
   - Try to complete the current line to an entire line in the buffer.
   - Try to complete as an Emacs Lisp symbol, as many characters as unique.
   - Try to complete word as an Emacs Lisp symbol.
   #+BEGIN_SRC emacs-lisp
   (use-package hippie-exp
     :custom
     (hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
     :general
     ([remap dabbrev-expand] 'hippie-expand))
   #+END_SRC

** Ivy
   #+BEGIN_SRC emacs-lisp
   (use-package ivy :ensure t
     :diminish ivy-mode
     :hook (after-init . ivy-mode)
     :custom
     (ivy-wrap t)
     (ivy-on-del-error-function #'ignore)
     (ivy-use-virtual-buffers t)
     ;; Allow selecting the prompt as a candidate (e.g for creating a new file)
     (ivy-use-selectable-prompt t)
     (ivy-fixed-height-minibuffer t)
     ;; Highlight whole line
     (ivy-format-function #'ivy-format-function-line)
     :general
     (:keymaps
      'ivy-mode-map
      [remap switch-to-buffer] 'ivy-switch-buffer
      "C-o"                    'ivy-dispatching-done
      "C-c C-r"                'ivy-resume)
     (:keymaps
      'ivy-occur-grep-mode-map
      "C-c '" 'ivy-wgrep-change-to-wgrep-mode)
     (:keymaps
      'ivy-minibuffer-map
      "M-v"    'yank
      "M-z"    'undo
      "C-k"    'ivy-previous-line
      "C-j"    'ivy-next-line
      "C-l"    'ivy-alt-done
      "C-w"    'ivy-backward-kill-word
      "C-u"    'ivy-kill-line
      "C-b"    'backward-word
      "C-f"    'forward-word)
     :init
     ;; Don't use ^ as initial input
     (setq ivy-initial-inputs-alist nil)

     (setq-default
      projectile-completion-system 'ivy
      smex-completion-method 'ivy
      magit-completing-read-function #'ivy-completing-read))
    #+END_SRC

   Used by =counsel-M-x= for sorting
   #+BEGIN_SRC emacs-lisp
   (use-package smex :ensure t
     :custom
     (smex-auto-update nil))
   #+END_SRC

   Replacements for common Emacs commands
   #+BEGIN_SRC emacs-lisp
   (use-package counsel :ensure t
     :diminish counsel-mode
     :hook (ivy-mode . counsel-mode)
     :custom
     (counsel-find-file-ignore-regexp
      "\\(?:^[#.]\\)\\|\\(?:[#~]$\\)\\|\\(?:^Icon?\\)")
     (counsel-grep-base-command
      "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
     (counsel-mode-override-describe-bindings t)
     :general
     (:keymaps
      'evil-ex-completion-map
      "C-r" 'counsel-minibuffer-history)
     (:keymaps
      'counsel-mode-map
      "C-c r" 'counsel-recentf
      "C-c g" 'counsel-git
      "C-c j" 'counsel-git-grep
      "C-c J" 'counsel-rg
      ;; Use counsel/swiper for search
      "C-r"   'counsel-grep-or-swiper
      "C-s"   'counsel-grep-or-swiper
      "C-x /" 'counsel-abbrev)
     (:keymaps
      'counsel-ag-map
      "C-SPC" 'ivy-call-and-recenter)
     :config
     (defun counsel-abbrev (abbrev-name)
       "Insert abbreviation matching ABBREV-NAME."
       (interactive
       (list
       (ivy-completing-read
         "Insert abbrev: "
         (cl-loop for table in (abbrev--active-tables)
                  unless (abbrev-table-empty-p table)
                  append (append (delete 0 table) ())))))
       (progn
         (dolist (table (abbrev--active-tables))
           (when (abbrev-symbol abbrev-name table)
             (abbrev-insert (abbrev-symbol abbrev-name table)))))))
   #+END_SRC

   I-search replacement with overview
   #+BEGIN_SRC emacs-lisp
   (use-package swiper :ensure t
     :commands
     (swiper
      swiper-multi
      swiper-all))
   #+END_SRC

   Jump to document locations in current buffer
   #+BEGIN_SRC emacs-lisp
   (use-package imenu-anywhere :ensure t
     :general
     (:keymaps
      'ivy-mode-map
      [remap imenu-anywhere] 'ivy-imenu-anywhere))
   #+END_SRC

** Keys
   Display available keybindings in a popup
   #+BEGIN_SRC emacs-lisp
   (use-package which-key :ensure t :defer 1
     :diminish which-key-mode
     :custom
     (which-key-sort-order #'which-key-key-order-alpha)
     (which-key-sort-uppercase-first nil)
     (which-key-add-column-padding 1)
     (which-key-min-display-lines 5)
     (which-key-idle-delay 0.5)
     :commands
     (which-key-mode
      which-key-key-order-alpha)
     :config
     (push '(("<\\([[:alnum:]-]+\\)>" . nil) . ("\\1" . nil)) which-key-replacement-alist)
     (push '(("\\`\\?\\?\\'" . nil)          . ("λ" . nil)) which-key-replacement-alist)
     (push '(("<up>"    . nil)               . ("↑" . nil)) which-key-replacement-alist)
     (push '(("<right>" . nil)               . ("→" . nil)) which-key-replacement-alist)
     (push '(("<down>"  . nil)               . ("↓" . nil)) which-key-replacement-alist)
     (push '(("<left>"  . nil)               . ("←" . nil)) which-key-replacement-alist)
     (push '(("SPC" . nil)                   . ("␣" . nil)) which-key-replacement-alist)
     (push '(("TAB" . nil)                   . ("↹" . nil)) which-key-replacement-alist)
     (push '(("RET" . nil)                   . ("⏎" . nil)) which-key-replacement-alist)
     (push '(("DEL" . nil)                   . ("⌫" . nil)) which-key-replacement-alist)
     (push '(("deletechar" . nil)            . ("⌦" . nil)) which-key-replacement-alist)

     (which-key-add-key-based-replacements
       "C-c !" "check"
       "C-c @" "outline"
       "C-c &" "snippet"
       "C-c m" "major-mode"
       "C-c W" "workspace")
     (which-key-setup-side-window-bottom)

     (which-key-mode 1))
   #+END_SRC

* Keybindings
  I am trying to reduce the amount of keybindings, therefore I present
  a table of default keybindings in case I would forget them.

  | Keybinding    | Function                | Description                                                  |
  |---------------+-------------------------+--------------------------------------------------------------|
  | =M-SPC=         | =just-one-space=          | Ensures just one space                                       |
  | =M-\=           | =delete-horizontal-space= | Delete all space                                             |
  | =M-^=           | =delete-indentation=      | Join current line with previous line                         |
  | =M-z=           | =zap-to-char=             | Delete until character                                       |
  | =C-S-backspace= | kill-whole-line         | Kill entire lines, can be used to move several lines at once |
  | =M-/=           | =dabbrev-expand=          | Abbreviation completion                                      |

*** Leader keys
    #+BEGIN_SRC emacs-lisp
    (defvar +leader-key "C-c"
      "The key used for most custom operations.")
    (defvar +local-leader-key "C-c m"
      "The key used for major mode operations.")
    (defvar +evil-normal-state-leader-key "SPC"
      "The key used for most custom operations in `evil-normal-state'.")
    #+END_SRC

*** Global
    #+BEGIN_SRC emacs-lisp
    (general-define-key
     :keymaps 'global
     ;; Toggle popups
     "C-`" 'window-toggle-side-windows
     "C-§" 'window-toggle-side-windows
     ;; Terminal
     "C-!" 'eshell
     "C-±" 'eshell)
    #+END_SRC

* Settings
** Editor
   Use UTF-8 as the default coding system.
   #+BEGIN_SRC emacs-lisp
   (set-charset-priority 'unicode)
   (prefer-coding-system        'utf-8)
   (set-terminal-coding-system  'utf-8)
   (set-keyboard-coding-system  'utf-8)
   (set-selection-coding-system 'utf-8)
   (setq locale-coding-system   'utf-8)
   (setq-default buffer-file-coding-system 'utf-8)
   (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
   #+END_SRC

   Default to indentation by spaces, that seems to be what most languages use nowadays.
   #+BEGIN_SRC emacs-lisp
   (setq-default
    indent-tabs-mode nil
    require-final-newline t)
   #+END_SRC

   Convert between tabs and spaces (only tabify initial whitespace)
   #+BEGIN_SRC emacs-lisp
   (setq tabify-regexp "^\t* [ \t]+")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (setq confirm-nonexistent-file-or-buffer t)
   #+END_SRC

   Save clipboard contents into kill-ring before replacing them
   #+BEGIN_SRC emacs-lisp
   (setq save-interprogram-paste-before-kill t)
   #+END_SRC

   Preferred line-length when filling and don't require double spaces
   to end a sentance.
   #+BEGIN_SRC emacs-lisp
   (setq fill-column 80
         sentence-end-double-space nil
         word-wrap t)
   #+END_SRC

   Whitespace mode behavior
   #+BEGIN_SRC emacs-lisp
   (use-package whitespace
     :custom
     (whitespace-line-column fill-column)
     (whitespace-style
      '(face tabs tab-mark spaces space-mark trailing lines-tail))
     (whitespace-display-mappings
      '((tab-mark ?\t [?› ?\t])
        (newline-mark 10 [?¬ 10])
        (space-mark 32 [183] [46]))))
   #+END_SRC

   Make scrolling be more procedural.
   #+BEGIN_SRC emacs-lisp
   (setq auto-window-vscroll nil
         hscroll-margin 5
         hscroll-step 5
         scroll-conservatively 101
         scroll-down-aggressively 0.01
         scroll-margin 0
         scroll-preserve-screen-position t
         scroll-up-aggressively 0.01)
   #+END_SRC

   Display indicator for buffer boundaries in the right fringe.
   #+BEGIN_SRC emacs-lisp
   (setq-default indicate-buffer-boundaries 'right)
   #+END_SRC

** Performance
   Disable bidirectional text for tiny performance boost
   #+BEGIN_SRC emacs-lisp
   (setq bidi-display-reordering nil)
   #+END_SRC

   Update UI less frequently
   #+BEGIN_SRC emacs-lisp
   (setq idle-update-delay 2
         jit-lock-defer-time 0
         jit-lock-stealth-time 0.2
         jit-lock-stealth-verbose nil)
   #+END_SRC

* Display
  Don't implicitly resize frames when changes various settings.
  #+BEGIN_SRC emacs-lisp
  (setq frame-inhibit-implied-resize t)
  #+END_SRC

  Favor horizontal splits
  #+BEGIN_SRC emacs-lisp
  (setq split-width-threshold nil)
  #+END_SRC

  Manage window layouts
  #+BEGIN_SRC emacs-lisp
  (use-package winner
    :hook (window-setup . winner-mode)
    :commands (winner-undo winner-redo))
  #+END_SRC

  Hide async shell command buffers
  #+BEGIN_SRC emacs-lisp
  (push '("^*Async Shell Command*" . (display-buffer-no-window))
        display-buffer-alist)
  #+END_SRC

  Always display pop up buffers at the bottom and regard all star
  buffers as such buffers.
  #+BEGIN_SRC emacs-lisp
  (push `(,(rx bos "*" (one-or-more anything) "*" eos)
          (display-buffer-reuse-window
           display-buffer-in-side-window)
          (reusable-frames . visible)
          (side            . bottom)
          (window-height   . 0.4))
        display-buffer-alist)
  #+END_SRC

  Fast window navigation
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window :ensure t
    :custom
    (aw-background nil)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-scope 'frame)
    :commands
    (ace-window
     ace-swap-window ace-delete-window
     ace-select-window ace-delete-other-window)
    :general
    ([remap other-window] 'ace-window))

  #+END_SRC

  Zoom a window to display as a single window temporarily.
  #+BEGIN_SRC emacs-lisp
  (use-package zoom-window :ensure t
    :commands zoom-window-zoom
    :general
    ("C-x C-z" 'zoom-window-zoom))
  #+END_SRC

* Buffers
  Remove visual indicators from non-selected windows
  #+BEGIN_SRC emacs-lisp
  (setq-default
   cursor-in-non-selected-windows nil
   highlight-nonselected-windows nil)
  #+END_SRC

  Writeable grep buffer with ability to apply the changes to all the
  files.
  #+BEGIN_SRC emacs-lisp
  (use-package wgrep-ag :ensure t
    :custom
    (wgrep-auto-save-buffer t)
    :commands wgrep-change-to-wgrep-mode)
  #+END_SRC

** Minibuffer
   Enable recursive minibuffers and keep the point out of the minibuffer.
   #+BEGIN_SRC emacs-lisp
   (setq enable-recursive-minibuffers t
         minibuffer-prompt-properties
         '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
   #+END_SRC

   Specify minibuffer size behaviour and increase max window height slightly.
   #+BEGIN_SRC emacs-lisp
   (setq max-mini-window-height 0.3
         resize-mini-windows 'grow-only)
   #+END_SRC

   Don't show fringes in the minibuffer.
   #+BEGIN_SRC emacs-lisp
   (defun +disable-minibuffer-window-fringes ()
     "Disable the window fringes for minibuffer window."
     (set-window-fringes (minibuffer-window) 0 0 nil))
   (add-hook 'emacs-startup-hook #'+disable-minibuffer-window-fringes)
   (add-hook 'minibuffer-setup-hook #'+disable-minibuffer-window-fringes)
   #+END_SRC

   Persist minibuffer history
   #+BEGIN_SRC emacs-lisp
   (setq history-delete-duplicates t
         history-length 500)

   (use-package savehist :defer 1
     :init
     (setq savehist-additional-variables '(search-ring regexp-search-ring)
           ;; Save on kill only
           savehist-autosave-interval 60
           savehist-save-minibuffer-history t)
     :config
     (savehist-mode 1))
   #+END_SRC


   Edit minibuffer in a new temporary buffer by pressing =M-C-e=.
   #+BEGIN_SRC emacs-lisp
   (use-package miniedit :ensure t
     :general
     (:keymaps
      '(minibuffer-local-map
        minibuffer-local-ns-map
        minibuffer-local-completion-map
        minibuffer-local-must-match-map)
      "M-C-e" 'miniedit))
   #+END_SRC

* Navigation
  Keep track of recently opened files
  #+BEGIN_SRC emacs-lisp
  (use-package recentf :defer 1
    :init
    (setq recentf-exclude
          (list "/tmp/"           ; Temp-files
                "/dev/shm"        ; Potential secrets
                "/ssh:"           ; Files over SSH
                "/TAGS$"          ; Tag files
                "^/\\.git/.+$"    ; Git contents
                "\\.?ido\\.last$"
                "\\.revive$"
                "^/var/folders/.+$"
                (concat "^" +data-dir ".+$"))
          recentf-filename-handlers '(abbreviate-file-name)
          recentf-max-menu-items 0
          recentf-max-saved-items 250
          recentf-auto-cleanup 'never)
    :config
    (quiet! (recentf-mode 1)))
  #+END_SRC

  Keep track of last point place to resume editing in the same file.
  #+BEGIN_SRC emacs-lisp
  (use-package saveplace :defer 1
    :config
    (save-place-mode 1))
  #+END_SRC

  Setup bookmarks
  #+BEGIN_SRC emacs-lisp
  (use-package bookmark
    :custom
    (bookmark-save-flag 1))
  #+END_SRC

  Move point through buffer-undo-list positions
  #+BEGIN_SRC emacs-lisp
  (use-package goto-last-change :ensure t
    :commands goto-last-change)
  #+END_SRC

  Hint mode for links
  #+BEGIN_SRC emacs-lisp
  (use-package ace-link :ensure t
    :commands
    (ace-link
     ace-link-info
     ace-link-help
     ace-link-eww
     ace-link-org))
  #+END_SRC

** Project
   Project interactions. Prefix project buffer files with the project
   name and re
   #+BEGIN_SRC emacs-lisp
   (use-package projectile :ensure t :demand t
     :diminish projectile-mode
     :hook (find-file . +projectile-relative-buf-name)
     :custom
     (projectile-keymap-prefix (kbd "C-c C-p"))
     :general
     (:keymaps
      'projectile-mode-map
      "C-c C-p" 'projectile-command-map)
     :init
     (defun +projectile-relative-buf-name ()
       (let ((buffer-name (if (projectile-project-p)
                              (concat (projectile-project-name) "/" (file-relative-name buffer-file-name (projectile-project-root)))
                            (abbreviate-file-name buffer-file-name))))
         (rename-buffer buffer-name t)))

     (defun +projectile-cache-current-file (orig-fun &rest args)
       "Don't cache ignored files."
       (unless (cl-some (lambda (path)
                          (string-prefix-p buffer-file-name
                                           (expand-file-name path)))
                        (projectile-ignored-directories))
         (apply orig-fun args)))
     (advice-add #'projectile-cache-current-file :around #'+projectile-cache-current-file)

     (setq projectile-enable-caching nil
           projectile-file-exists-remote-cache-expire nil
           projectile-globally-ignored-file-suffixes
           '(".elc" ".pyc" ".o" ".hi" ".class" ".cache")
           projectile-globally-ignored-files
           '("TAGS" "GPATH" "GRTAGS" "GTAGS")
           projectile-indexing-method 'alien
           projectile-ignored-projects (list +data-dir))
     :config
     (setq projectile-globally-ignored-directories
           (append '("_build"
                     "target" "project/target"
                     "vendor/bundle" "vendor/cache"
                     "elm-stuff" "tests/elm-stuff")
                   projectile-globally-ignored-directories))

     (setq projectile-project-root-files
           (append '("package.json" "Package.swift" "README.md")
                   projectile-project-root-files))
     (setq projectile-other-file-alist
           (append '(("less" "css")
                     ("styl" "css")
                     ("sass" "css")
                     ("scss" "css")
                     ("css" "scss" "sass" "less" "styl")
                     ("jade" "html")
                     ("pug" "html")
                     ("html" "jade" "pug" "jsx" "tsx"))
                   projectile-other-file-alist))

     (projectile-mode 1))
   #+END_SRC

* Code
  Use [[https://editorconfig.org/][EditorConfig]] to maintain the coding styles used across different
  projects.
  #+BEGIN_SRC emacs-lisp
  (use-package editorconfig :ensure t :defer 1
    :mode ("\\.?editorconfig$" . editorconfig-conf-mode)
    :diminish editorconfig-mode
    :init
    (defun +ws-butler-editorconfig (props)
      "Use ws-butler mode instead of delete-trailing-whitespace."
      (if (equal (gethash 'trim_trailing_whitespace props) "true")
          (progn
            (setq write-file-functions
                  (delete 'delete-trailing-whitespace write-file-functions))
            (ws-butler-mode 1))
        (ws-butler-mode 0)))

    (autoload 'editorconfig-conf-mode "editorconfig-conf-mode" nil t)
    :config
    (with-eval-after-load 'ws-butler
      (add-hook 'editorconfig-custom-hooks #'+ws-butler-editorconfig))
    (editorconfig-mode 1))
  #+END_SRC

  Delete trailing white-space before save, but *only* for edited lines.
  #+BEGIN_SRC emacs-lisp
  (use-package ws-butler :ensure t
    :diminish ws-butler-mode
    :commands ws-butler-mode)
  #+END_SRC

  Project-specific environment variables via =direnv=.
  #+BEGIN_SRC emacs-lisp
  (use-package direnv :ensure t :defer 2
    :custom
    (direnv-always-show-summary nil)
    :config
    (direnv-mode 1))
  #+END_SRC

  Automatic indentation as you type. It is a bit more robust than
  =electric-indent-mode=, but perhaps I should look into using that for
  those modes that are not compatible with =aggressive-indent-mode=.
  #+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent :ensure t :defer 2
    :diminish aggressive-indent-mode
    :commands
    (aggressive-indent-mode
     global-aggressive-indent-mode)
    :config
    ;; Disabled modes
    (dolist (mode '(diff-auto-refine-mode))
      (push mode aggressive-indent-excluded-modes))

    (global-aggressive-indent-mode 1))
  #+END_SRC

  Buttonize URLs and e-mail addresses in the current buffer.
  #+BEGIN_SRC emacs-lisp
  (use-package goto-addr
    :hook
    (text-mode . goto-address-mode)
    (prog-mode . goto-address-prog-mode))
  #+END_SRC

  Highlight *TODO* inside comments and strings.
  #+BEGIN_SRC emacs-lisp
  (use-package hl-todo :ensure t
    :hook (prog-mode . hl-todo-mode))
  #+END_SRC

  Document locations in a sidebar
  #+BEGIN_SRC emacs-lisp
  (use-package imenu-list :ensure t
    :commands (imenu-list-minor-mode
               imenu-list-smart-toggle))
  #+END_SRC

  Peek definition (Display the function source inline)
  #+BEGIN_SRC emacs-lisp
  (use-package source-peek :el-get t
    :commands source-peek)
  #+END_SRC

** Compilation
   Kill compilation process before stating another and save all buffers on =compile.=
   #+BEGIN_SRC emacs-lisp
   (setq compilation-always-kill t
         compilation-ask-about-save nil
         compilation-scroll-output t)
   #+END_SRC

** Version control
   #+BEGIN_SRC emacs-lisp
   (setq vc-follow-symlinks t)
   #+END_SRC

   Setup Ediff
   - Split horizontally
   - Use existing frame instead of creating a new one
   - Add a third resolution option, copy both A and B to C
   #+BEGIN_SRC emacs-lisp
   (use-package ediff
     :hook (ediff-quit . winner-undo)
     :custom
     (ediff-diff-options "-w")
     (ediff-merge-split-window-function #'split-window-horizontally)
     (ediff-split-window-function #'split-window-horizontally)
     (ediff-window-setup-function #'ediff-setup-windows-plain)
     :commands
     (ediff-copy-diff
      ediff-get-region-contents
      ediff-setup-windows-plain)
     :general
     (:keymaps
      'ediff-mode-map
      "d" '(ediff-copy-both-to-C      :wk "Copy both to C")
      "j" '(ediff-next-difference     :wk "Next difference")
      "k" '(ediff-previous-difference :wk "Previous difference"))
     :init
     (defun ediff-copy-both-to-C ()
       "Copy change from both A and B to C."
       (interactive)
       (ediff-copy-diff
        ediff-current-difference nil 'C nil
        (concat
         (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
         (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer)))))
   #+END_SRC

** Syntax checker
   Silence next/previous error, by default it produces a message every time.
   #+BEGIN_SRC emacs-lisp
   (advice-add #'next-error :around #'quiet-function-advice)
   (advice-add #'previous-error :around #'quiet-function-advice)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package flymake
     :hook
     (flymake-mode . +flymake-setup-next-error-function)
     :custom
     (help-at-pt-timer-delay 0.1)
     (help-at-pt-display-when-idle '(flymake-diagnostic))
     :general
     (:keymaps
      'flymake-mode-map
      "C-c !" 'flymake-show-diagnostics-buffer)
     (:keymaps
      'flymake-diagnostics-buffer-mode-map
      "C-n" 'flymake-diagnostics-next-error
      "C-p" 'flymake-diagnostics-prev-error
      "j"   'flymake-diagnostics-next-error
      "k"   'flymake-diagnostics-prev-error
      "RET" 'flymake-goto-diagnostic
      "TAB" 'flymake-show-diagnostic)
     :init
     (defun +flymake-setup-next-error-function ()
       (setq next-error-function 'flymake-goto-next-error))

     (defun +flymake-diagnostics-next-error ()
       (interactive)
       (next-line)
       (when (eobp) (previous-line))
       (flymake-show-diagnostic (point)))

     (defun +flymake-diagnostics-prev-error ()
       (interactive)
       (previous-line)
       (flymake-show-diagnostic (point))))
   #+END_SRC
* Major modes
** elisp
   #+BEGIN_SRC emacs-lisp
   (use-package elisp-mode
     :mode
     ("recipes/.*$" . emacs-lisp-mode)
     :hook
     (emacs-lisp-mode . flymake-mode)
     (emacs-lisp-mode . show-paren-mode)
     (emacs-lisp-mode . eldoc-mode)
     :general
     (:keymaps
      'emacs-lisp-mode-map
      :major-modes t
      :prefix +local-leader-key
      "c" 'emacs-lisp-byte-compile
      "C" 'emacs-lisp-byte-compile-and-load
      "t" 'elisp-test)
     :custom
     (ad-redefinition-action 'accept)
     (apropos-do-all t)
     (enable-local-eval nil)
     (enable-local-variables :safe))
   #+END_SRC

   Nicer lisp editing experience
   #+BEGIN_SRC emacs-lisp
   (use-package lispy :ensure t
     :diminish lispy-mode
     :hook (emacs-lisp-mode . lispy-mode))
   #+END_SRC

   Better =*help*= buffer
   #+BEGIN_SRC emacs-lisp
   (use-package helpful :ensure t
     :commands
     (helpful-at-point
      helpful-callable helpful-command
      helpful-function helpful-key helpful-macro
      helpful-symbol helpful-variable)
     :general
     (:keymaps
      'help-map
      "C" 'helpful-command
      "f" 'helpful-function
      "F" 'helpful-callable
      "k" 'helpful-key
      "M" 'helpful-macro
      "v" 'helpful-variable)
     (:keymaps
      'helpful-mode-map
      "[[" 'backward-button
      "]]" 'forward-button
      "o" '(ace-link-help :package 'ace-link)))
   #+END_SRC

** org
   #+BEGIN_SRC emacs-lisp
   (use-package org :pin org :ensure t
     :hook
     (org-mode . auto-fill-mode)
     (org-babel-after-execute . org-redisplay-inline-images)
     :general
     (:keymaps
      'org-mode-map :major-modes t
      "C-c RET" 'goto-address-at-point
      "C-c SPC" 'nil)
     (:keymaps
      'org-src-mode-map
      "C-c C-c" 'org-edit-src-exit)
     :init
     (setq org-agenda-files '("~/org")
           org-confirm-babel-evaluate nil
           org-edit-src-content-indentation 0
           org-hide-emphasis-markers t
           org-log-done 'time
           org-startup-with-inline-images t
           org-special-ctrl-a/e t
           org-src-preserve-indentation nil
           org-src-fontify-natively t
           org-src-tab-acts-natively t
           org-tag-alist
           '(("@work"  . ?w)
             ("@home"  . ?h)
             ("laptop" . ?l))))
   #+END_SRC

*** Look
    This sections makes =org-mode= look more beautiful and appealing.

    Pretty bullets for headings:
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets :ensure t
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '(" "))
      ;; Use default font face (also size)
      (org-bullets-face-name 'org-variable-pitch-face))
    #+END_SRC

    Use variable-pitch font:
    #+BEGIN_SRC emacs-lisp
    (use-package org-variable-pitch :ensure t
      :diminish org-variable-pitch-minor-mode
      :hook (org-mode . org-variable-pitch-minor-mode)
      :custom
      (org-variable-pitch-fixed-font +fixed-pitch-font)
      :init
      ;; Also align headings and lists
      (font-lock-add-keywords
       'org-mode '(("^[[:space:]-*+]+" 0 'org-variable-pitch-face append)) 'append))
    #+END_SRC

    Pretty bullet lists:
    #+BEGIN_SRC emacs-lisp
    (font-lock-add-keywords
     'org-mode
     '(("^ +\\([-*+]\\) "
        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "●"))))
       ("^ +[-*+] \\[\\(X\\)\\] "
        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "✕"))))))
    #+END_SRC

    Pretty task symbols:
    #+BEGIN_SRC emacs-lisp
    (font-lock-add-keywords
     'org-mode
     `(("^\\*+ \\(TODO\\) "
        (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑") nil)))
       ("^\\*+ \\(DOING\\) "
        (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐") nil)))
       ("^\\*+ \\(CANCELED\\) "
        (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘") nil)))
       ("^\\*+ \\(DONE\\) "
        (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔") nil)))))
    #+END_SRC
